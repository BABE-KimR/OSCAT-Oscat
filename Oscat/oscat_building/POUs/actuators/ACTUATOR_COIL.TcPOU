<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="ACTUATOR_COIL" Id="{822b8387-b840-4717-885a-e312fcb76e78}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK ACTUATOR_COIL
VAR_INPUT
	IN : BOOL;
END_VAR
VAR_INPUT CONSTANT
	self_act_cycle : TIME := t#10d;
	self_act_time : TIME := t#1s;
END_VAR
VAR_OUTPUT
	OUT :BOOL;
	STATUS : BYTE;
END_VAR
VAR
	last : DWORD;
	init: BOOL;
	tx: DWORD;
	now: DWORD;
END_VAR


(*
version 1.0	1. jun. 2008
programmer 	hugo
tested by		tobias

this is an intelligent actuator interface for any coil actuator.
the coil actuator can only switch on/off.
coil actuators like vents can get stuck if they are not u8sed for a long time and need to be autoactivated on ce in a while.

*)
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* read system time *)
now := T_PLC_MS();

(* initialize for first cycle *)
IF NOT init THEN
	last := now;
	init := TRUE;
ELSIF IN THEN
	OUT := TRUE;
	STATUS := 101; (* activated by input *)
	LAST := now;
ELSE
	OUT := FALSE;
	STATUS := 100; (* disabled *)
	(* now we need to check for self activation *)
	tx := now - last;
	IF (self_act_cycle > T#0s) AND (tx >= TIME_TO_DWORD(self_act_cycle)) THEN
		OUT := TRUE;
		STATUS := 102; (* auto activation *)
		IF tx >= TIME_TO_DWORD(self_act_cycle + self_act_time) THEN
			last := now;
			OUT := FALSE;
			STATUS := 100; (* idle *)
		END_IF;
	END_IF;
END_IF;



(*
revision history:

hm		1. jun. 2008 	rev 1.0
	original version

*)]]></ST>
    </Implementation>
    <LineIds Name="ACTUATOR_COIL">
      <LineId Id="31" Count="35" />
    </LineIds>
  </POU>
</TcPlcObject>