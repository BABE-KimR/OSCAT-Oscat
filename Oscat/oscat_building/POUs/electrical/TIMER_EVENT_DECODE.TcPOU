<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="TIMER_EVENT_DECODE" Id="{63ceb835-b627-409b-bfb1-3219a33ad86b}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION TIMER_EVENT_DECODE : TIMER_EVENT
VAR_INPUT
	EVENT : T_MaxString;
	LANG :	INT;
END_VAR
VAR
	pos: INT;
	start : INT;
	stop: INT;
	pt : POINTER TO ARRAY[1..255] OF BYTE;
	step: INT;
	tmp : STRING(60);
END_VAR



(*
version 1.1	25. oct. 2008
programmer 	hugo
tested by	oscat

STRING_TO_TIMER_EVENT converts a string to a timer event structure.

*)]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* a timer event is specified as follows:
	$typ;ch;day;start;duration;land;lor#
$ 		= start of definition
typ 	= type of definition	(number)
channel	= channel number		(number)
day 	= day number			(number)
start	= start time			(time of day)
duration= duration of event		(time)
land	= mask for output AND	(8bit value)
lor		= mask for ourput OR	(8bit value)
#		= end of definition
*)

(* check for start and ending character *)
IF (LEFT(event,1) <> '<') AND (RIGHT(event,1) <> '>') THEN RETURN; END_IF;
stop := LEN(event);
pt := ADR(event);
start := 2;

(* parse the string for next ; *)
FOR pos := 2 TO stop DO
	IF pt^[pos] = 59 OR pt^[pos] = 62 THEN
		tmp := MID(event, pos - start, start);
		CASE step OF
			0:	(* read type *)
				TIMER_EVENT_DECODE.typ := FSTRING_TO_BYTE(tmp);

			1:	(* read channel *)
				TIMER_EVENT_DECODE.channel := FSTRING_TO_BYTE(tmp);

			2:	(* read day *)
				IF IS_CC(tmp,'0123456789abcdefABCDEF#') THEN
					TIMER_EVENT_DECODE.day := FSTRING_TO_BYTE(tmp);
				ELSIF TIMER_EVENT_DECODE.typ = 2 THEN
					TIMER_EVENT_DECODE.DAY := FSTRING_TO_WEEK(tmp, LANG);
				ELSE
					TIMER_EVENT_DECODE.DAY := INT_TO_BYTE(FSTRING_TO_WEEKDAY(tmp, LANG));
				END_IF;

			3:	(* read start *)
				TIMER_EVENT_DECODE.start := STRING_TO_TOD(tmp);

			4:	(* read duaration *)
				TIMER_EVENT_DECODE.duration := STRING_TO_TIME(tmp);

			5:	(* read land *)
				TIMER_EVENT_DECODE.land := FSTRING_TO_BYTE(tmp);

			6:	(* read lor *)
				TIMER_EVENT_DECODE.LOR := FSTRING_TO_BYTE(tmp);
		END_CASE;
		start := pos + 1;
		step := step + 1;
	END_IF;
END_FOR;




(* revision history
hm	17. jun 2008	rev 1.0
	original version

hm	25. oct. 2008	rev 1.1
	adding input lang for language selection
*)
]]></ST>
    </Implementation>
    <LineIds Name="TIMER_EVENT_DECODE">
      <LineId Id="24" Count="66" />
    </LineIds>
  </POU>
</TcPlcObject>