<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="FILE_SERVER" Id="{d5df5d1c-2eef-4918-9242-e1429b265636}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK FILE_SERVER
VAR_IN_OUT
	FSD : FILE_SERVER_DATA;
	PT : NETWORK_BUFFER;
END_VAR
VAR
	buf_size : UDINT;
	handle : UINT; (* Filehandle *)
	read_max_length : UDINT;(* maximale Datenlänge *)
	file_position : UDINT;(* aktueller Schreib/Lesezeiger *)
	used_filename : STRING;(* aktueller Dateiname *)
	close_time : TIME;
	length_read : UDINT;
	write_length : UDINT;
	length_written : UDINT;
	open_handle : UINT;
	seek_position : UDINT;
	seek_mode : INT;
	seek_data : ARRAY[0..1] OF DINT;
	tell_position : UDINT;
	open_mode : DWORD;
	last_mode: BYTE;
	command : BYTE;
	error_code : BYTE;
	error : BOOL;
	file_change : BOOL;
	step : INT;
	t_diff : TIME;
	tx_last : TIME;
	tx : TIME;
	X : FW_AdsRdWrt;
	tmpDW : UDINT;
	para : BOOL;

	(*LOG_MSG : LOG_MSG;
	_debug_enable : BOOL := TRUE;
	step_last : INT;*)
END_VAR

(*
version 1.0		23. sep. 2010
programmer 		ks
tested by			ks

FILE_SERVER ermöglicht den Zugriff auf Datteien mittels Plattform-Neutraler Schnittstelle
*)

(*
- Befehle -
1 = File_Open_Exist + File_Read
2 = File_Open_Exist + File_Write
3 = File_Open_New  + File_Write
4 = File_Remove
5 = File_Close

- Action -
1 = file_open (open)
2 = file_close (close)
3 = file_read (read)
4 = file_write (write)
5 = file_seek (setpos)
6 = file_tell (getpos)
7 = file_remove (delete)

---- fehlermeldungen----

00	Kein Fehler
19	SYSTEMSERVICE_FOPEN		Unbekannte oder ungültige Parameter
28	SYSTEMSERVICE_FOPEN		Datei nicht gefunden. Ungültiger Dateiname oder Dateipfad
38	SYSTEMSERVICE_FOPEN		Keine weiteren freien File Handles.
51	SYSTEMSERVICE_FCLOSE	ungültiges oder unbekanntes file handle.
62	SYSTEMSERVICE_FCLOSE	Datei wurde mit falscher Methode geöffnet.
67	SYSTEMSERVICE_FREAD		ungültiges oder unbekanntes file handle.
74	SYSTEMSERVICE_FREAD		Kein Speicher für Lesebuffer.
78	SYSTEMSERVICE_FREAD		Datei wurde mit falscher Methode geöffnet.
83	SYSTEMSERVICE_FWRITE	ungültiges oder unbekanntes file handle
94	SYSTEMSERVICE_FWRITE	Datei wurde mit falscher Methode geöffnet.
99	SYSTEMSERVICE_FSEEK		ungültiges oder unbekanntes file handle.
110	SYSTEMSERVICE_FSEEK		Datei wurde mit falscher Methode geöffnet.
115	SYSTEMSERVICE_FTELL		ungültiges oder unbekanntes file handle.
126	SYSTEMSERVICE_FTELL		Datei wurde mit falscher Methode geöffnet
140	SYSTEMSERVICE_FDELETE	Datei nicht gefunden. Ungültiger Dateiname oder Dateipfad.
255	Applikation					Position liegt hinter dem Dateiende

*)
]]></Declaration>
    <Implementation>
      <ST><![CDATA[(* read system timer *)
tx := UDINT_TO_TIME(T_PLC_MS());
t_diff := tx - tx_last;
tx_last := tx;

CASE step OF
0:
	IF FSD.MODE = LIMIT(1,FSD.MODE,5) THEN

		(* ---------------------- Debug-Message ----------------------------*)
		(*IF _debug_enable THEN
			LOG_CL.NEW_MSG := 'FS: File_Start Mode=~1';
			LOG_CL.PRINTF[1] := BYTE_TO_STRING(FSD.MODE);
			LOG_MSG();
		END_IF;*)
		(* -----------------------------------------------------------------------------*)

		(* Initialisierung *)
		X.sNetId := '';
		X.tTimeout := T#5s;
		X.nPort := 10000; (* AMSPORT_R3_SYSSERV *)

		buf_size := SIZEOF(PT.BUFFER);
		close_time := T#1ms; (* wenn Schritt aktiv ist, dann Close-Timer rücksetzen *)

		IF FSD.MODE = 4 THEN (* File_Remove *)
			IF handle > 0 THEN
				File_change := TRUE;
				step := 32000; (* File_Close ausführen *)
			ELSE
				step := 90; (* File_Remove ausführen *)
			END_IF;

		ELSIF FSD.MODE = 5 THEN (* File_Close *)
			step := 32000; (* File_Close ausführen *)

		ELSIF handle = 0 THEN (* MODE 1,2,3 *)
			step := 100; (* File muss erst geöffnet werden *)

		ELSE (* File ist geöffnset *)
			IF used_filename = FSD.FILENAME AND FSD.MODE = last_mode THEN (* kein Moduswechsel ? *)
				step := 200; (* ohne open prozedure weitermachen *)
			ELSE
				step := 32000;
				File_change := TRUE;
			END_IF;
		END_IF;

	ELSIF handle > 0 THEN (* offene Datei gefunden - AutoClose Modus *)
		IF FSD.AUTO_CLOSE > T#0s THEN
			close_time := close_time + t_diff; (* Close_Time hochzählen *)
			IF close_time > FSD.AUTO_CLOSE THEN (* Zeit überschrittenen *)
				step := 32000; (* automatisch Datei schliessen *)
			END_IF;
		END_IF;
	END_IF;

(* ----------------------------------- *)
090: (* File_Remove *)
	command := 7; (* File Remove *)
	step := 95;

095: (* File_Remove beendet *)
	IF command = 0 THEN
		step := 30000; (* Beenden *)
	END_IF;
(* ----------------------------------- *)

100: (* File_Open *)
	IF FSD.MODE = 3 THEN (* Open_New + File Write *)
		open_mode := 16#0001_001A; (* PATH_GENERIC + WRITEPLUS + BINARY *)
	ELSE (* Mode 1 Open_Exist + File _Read / Mode 2 Open_Exist + File_Write *)
		open_mode := 16#0001_0019; (* PATH_GENERIC + READPLUS + BINARY *)
	END_IF;
	command := 1; (* FileOpen *)
	step := 105;

105: (* File Open beendet *)
	IF command = 0 THEN
		IF error THEN
			step := 30000; (* Beenden *)
		ELSE
			(* Filedaten eintragen *)
			close_time := T#1ms; (* Timer freigeben *)
			handle := open_handle;
			used_filename := FSD.FILENAME;
			file_position := UDINT#4294967295; (* maximal = unbekannt *)
			last_mode := FSD.MODE;
			step := 110;
		END_IF;
	END_IF;

110: (* File Seek *)
	command := 5; (* File-Seek *)
	seek_position := 0;
	seek_mode := 2; (* SEEK_END - Seek from the end of file *)
	step := 115;

115: (* File Seek beendet *)
	IF command = 0 THEN
		IF error THEN
			step := 30000; (* Beenden *)
		ELSE
			command := 6; (* File-Tell starten *)
			step := 120;
		END_IF;
	END_IF;

120: (* File Tell beendet *)
	IF command = 0 THEN
		IF error THEN
			step := 30000; (* Beenden *)
		ELSE
			FSD.FILE_SIZE := tell_position; (* aktuelle Dateigroesse *)
			FSD.FILE_OPEN := TRUE;
			step := 200;
		END_IF;
	END_IF;

200: (* File Seek *)
	IF FSD.OFFSET > FSD.FILE_SIZE THEN (* prüfe auf gültige offset-vorgabe *)
		error_code := 255;
		step := 30000; (* Beenden *)
	ELSIF FSD.OFFSET <> file_position THEN
		command := 5; (* File-Seek *)
		seek_position := FSD.OFFSET;
		seek_mode := 0; (* Seek from beginning of file *)
		step := 210;
	ELSE
		step := 300;
	END_IF;

210: (* File Seek *)
	IF command = 0 THEN
		file_position := seek_position;
		IF error THEN
			step := 30000; (* Beenden *)
		ELSE
			step := 300;
		END_IF;
	END_IF;

300: (* Read or Write ? *)
	IF FSD.MODE = 1 THEN
		step := 400; (* Read *)
	ELSE
		step := 500; (* Write *)
	END_IF;

400: (* File Read *)
	IF UINT_TO_UDINT(PT.SIZE) > buf_size THEN (* Leselänge auf Buffergroesse begrenzen *)
		read_max_length := buf_size;
	ELSE
		read_max_length := UINT_TO_UDINT(PT.SIZE);
	END_IF;

	IF read_max_length > buf_size THEN
		read_max_length := buf_size;  (* Leselänge auf Buffergroesse begrenzen *)
	END_IF;

	(* Leselänge an Dateilänge anpassen *)
	IF file_position + read_max_length > FSD.FILE_SIZE THEN
		read_max_length := FSD.FILE_SIZE - file_position;
	END_IF;

	IF read_max_length > 0 THEN
		command := 3; (* File_Read *)
		step := 410;
	ELSE
		PT.SIZE := UINT#0;
		step := 30000; (* Beenden *)
	END_IF;

410: (* File Read *)
	IF command = 0 THEN
		PT.SIZE := TO_UINT(length_read);
		IF NOT Error THEN
			file_position := file_position + length_read; (* aktueller File_Position korrigieren *)
			FSD.OFFSET := file_position;
		END_IF;
		step := 30000; (* Beenden *)
	END_IF;

500: (* File Write *)
	IF UINT_TO_UDINT(PT.SIZE) > buf_size THEN (* Schreiblänge auf Buffergroesse begrenzen *)
		write_length := buf_size;
	ELSE
		write_length := UINT_TO_UDINT(PT.SIZE);
	END_IF;

	IF write_length > 0 THEN
		command := 4; (* File_Write *)
		step := 510;
	ELSE
		step := 30000; (* Beenden *)
	END_IF;

510:
	IF command = 0 THEN
		IF NOT Error THEN
			file_position := file_position + length_written; (* aktueller File_Position korrigieren *)
			FSD.OFFSET := file_position;
			IF file_position > FSD.FILE_SIZE THEN (* Datei ist groesser geworden *)
				FSD.FILE_SIZE := file_position;
			END_IF;
		END_IF;
		step := 30000; (* Beenden *)
	END_IF;

 (* --------------------------------------------- *)

30000: (* Befehl fertig *)
	FSD.MODE := 0;
	FSD.ERROR := error_code;
	step := 0;

	(* ---------------- Debug-Message -----------------------*)
	(*IF _debug_enable THEN
		LOG_CL.NEW_MSG := 'FS: File_Stop: File ~1, error ~7, code ~8';
		LOG_CL.PRINTF[1]  := used_filename;
		LOG_CL.PRINTF[7]  := INT_TO_STRING(BOOL_TO_INT(error));
		LOG_CL.PRINTF[8]  := BYTE_TO_STRING(error_code);
		LOG_MSG();
	END_IF;*)
	(* --------------------------------------------- *)

32000:
	close_time := T#0s; (* Timer stoppen *)
	IF handle > 0 THEN
		command := 2; (* File_Close ausführen *)
	END_IF;
	step := 32100;

32100:
	IF command = 0 THEN (* File Close beendet *)
		(* Filedaten ablöschen *)
		FSD.FILE_OPEN := FALSE;
		file_position := 0;
		FSD.FILE_SIZE := 0;
		FSD.OFFSET := 0;
		used_filename := '';
		handle := 0;

		(* File_Name wurde fliegend geändert ? *)
		IF file_change THEN
			file_change := FALSE;
			step := 0;
		ELSE
			step := 30000;
		END_IF;
	END_IF;

END_CASE;

(* 1 = file_open
   2 = file_close
   3 = file_read
   4 = file_write
   5 = file_seek
   6 = file_tell
   7 = file_remove
*) 

X(bExecute := FALSE); (* Zyklischer FW_AdsRdWrt Aufruf *)

(* ------------ File Open ------------- *)
IF command = 1 THEN
	IF NOT para THEN
		para := TRUE;
		X(	nIdxGrp := 120, (* SYSTEMSERVICE_FOPEN *)
			nidxOffs := open_mode,
			cbWriteLen := SIZEOF(FSD.FILENAME),
			pWriteBuff := ADR(FSD.FILENAME),
			cbReadLen := SIZEOF(tmpDW),
			pReadBuff := ADR(tmpDW),
			bExecute := TRUE
			);
	ELSIF X.bBusy = FALSE THEN
		para := FALSE;
		error := X.bError;
		error_code := SEL(error,0,UDINT_TO_BYTE(X.nErrId + 16#10));

		IF X.cbRead >= SIZEOF(tmpDW) THEN
			open_handle := TO_UINT(tmpDW);
		ELSE
			open_handle := 0;
		END_IF;
		command := 0;

		(* ---------------- Debug-Message -----------------------*)
		(*IF _debug_enable THEN
			LOG_CL.NEW_MSG := 'FS: Open: File ~1, handle ~2 , mode ~3 , error ~7, code ~8';
			LOG_CL.PRINTF[1] := FSD.FILENAME;
			LOG_CL.PRINTF[2] := DWORD_TO_STRING(open_handle);
			LOG_CL.PRINTF[3] := DWORD_TO_STRING(open_mode);
			LOG_CL.PRINTF[7] := INT_TO_STRING(BOOL_TO_INT(error));
			LOG_CL.PRINTF[8] := BYTE_TO_STRING(error_code);
			LOG_MSG();
		END_IF;*)
		(* -----------------------------------------------------------------*)
	END_IF;
END_IF;

(* ----------- File Close ------------- *)
IF command = 2 THEN
	IF NOT para THEN
		para := TRUE;
		X(	nIdxGrp := 121, (* SYSTEMSERVICE_FCLOSE *)
			nidxOffs := handle,
			cbWriteLen := 0,
			pWriteBuff := 0,
			cbReadLen := 0,
			pReadBuff := 0,
			bExecute := TRUE
			);
	ELSIF X.bBusy = FALSE THEN
		para := FALSE;
		error := X.bError;
		error_code := SEL(error,0,UDINT_TO_BYTE(X.nErrId + 16#30));
		command := 0;
		(* ---------------- Debug-Message -----------------------*)
		(*IF _debug_enable THEN
			LOG_CL.NEW_MSG := 'FS: Close: File ~1, error ~7, code ~8';
			LOG_CL.PRINTF[1] := used_filename;
			LOG_CL.PRINTF[7] := INT_TO_STRING(BOOL_TO_INT(error));
			LOG_CL.PRINTF[8] := BYTE_TO_STRING(error_code);
			LOG_MSG();
		END_IF;*)
		(* -----------------------------------------------------------------*)
	END_IF;
END_IF;

(* ------------ File Read ------------- *)
IF command = 3 THEN
	IF NOT para THEN
		para := TRUE;
		X(	nIdxGrp := 122, (* SYSTEMSERVICE_FREAD *)
			nidxOffs := handle,
			cbWriteLen := 0,
			pWriteBuff := 0,
			cbReadLen := read_max_length,
			pReadBuff := ADR(PT.BUFFER),
			bExecute := TRUE
			);
	ELSIF X.bBusy = FALSE THEN
		length_read := X.cbRead;
		para := FALSE;
		error := X.bError;
		error_code := SEL(error,0,UDINT_TO_BYTE(X.nErrId + 16#40));
		command := 0;

		(* ---------------- Debug-Message -----------------------*)
		(*IF _debug_enable THEN
			LOG_CL.NEW_MSG := 'FS: Read: File ~1, soll ~2,ist ~3 ,error ~7, code ~8';
			LOG_CL.PRINTF[1] := used_filename;
			LOG_CL.PRINTF[2] := UDINT_TO_STRING(read_max_length);
			LOG_CL.PRINTF[3] := UDINT_TO_STRING(length_read);
			LOG_CL.PRINTF[7] := INT_TO_STRING(BOOL_TO_INT(error));
			LOG_CL.PRINTF[8] := BYTE_TO_STRING(error_code);
			LOG_MSG();
		END_IF;*)
		(* -----------------------------------------------------------------*)
	END_IF;
END_IF;

(* ------------ File Write ------------- *)
IF command = 4 THEN
	IF NOT para THEN
		para := TRUE;
		X(	nIdxGrp := 123, (* SYSTEMSERVICE_FWRITE *)
			nidxOffs := handle,
			cbWriteLen := write_length,
			pWriteBuff := ADR(PT.BUFFER),
			cbReadLen := SIZEOF(length_written),
			pReadBuff := ADR(length_written),
			bExecute := TRUE
			);
	ELSIF X.bBusy = FALSE THEN
		para := FALSE;
		error := X.bError;
		error_code := SEL(error,0,UDINT_TO_BYTE(X.nErrId + 16#50));
		command := 0;

		(* ---------------- Debug-Message -----------------------*)
		(*IF _debug_enable THEN
			LOG_CL.NEW_MSG := 'FS: Write: File ~1, soll ~2,ist ~3 ,error ~7, code ~8';
			LOG_CL.PRINTF[1] := used_filename;
			LOG_CL.PRINTF[2] := UDINT_TO_STRING(write_length);
			LOG_CL.PRINTF[3] := UDINT_TO_STRING(length_written);
			LOG_CL.PRINTF[7] := INT_TO_STRING(BOOL_TO_INT(error));
			LOG_CL.PRINTF[8] := BYTE_TO_STRING(error_code);
			LOG_MSG();
		END_IF;*)
		(* -----------------------------------------------------------------*)
	END_IF;
END_IF;

(* ------------ File Seek ------------- *)
IF command = 5 THEN
	IF NOT para THEN
		para := TRUE;
		seek_data[0] := UDINT_TO_DINT(seek_position);
		seek_data[1] := INT_TO_DINT(seek_mode);

		X(	nIdxGrp := 124, (* SYSTEMSERVICE_FSEEK *)
			nidxOffs := handle,
			cbWriteLen := SIZEOF(seek_data),
			pWriteBuff := ADR(seek_data),
			cbReadLen := 0,
			pReadBuff := 0,
			bExecute := TRUE
			);
	ELSIF X.bBusy = FALSE THEN
		para := FALSE;
		error := X.bError;
		error_code := SEL(error,0,UDINT_TO_BYTE(X.nErrId + 16#60));
		command := 0;

		(* ---------------- Debug-Message -----------------------*)
		(*IF _debug_enable THEN
			LOG_CL.NEW_MSG := 'FS: Seek: File ~1,pos ~3 ,error ~7, code ~8';
			LOG_CL.PRINTF[1] := used_filename;
			LOG_CL.PRINTF[3] := UDINT_TO_STRING(seek_position);
			LOG_CL.PRINTF[7] := INT_TO_STRING(BOOL_TO_INT(error));
			LOG_CL.PRINTF[8] := BYTE_TO_STRING(error_code);
			LOG_MSG();
		END_IF;*)
		(* -----------------------------------------------------------------*)
	END_IF;
END_IF;

(* ------------ File Tell ------------- *)
IF command = 6 THEN
	IF NOT para THEN
		para := TRUE;
		X(	nIdxGrp := 125, (* SYSTEMSERVICE_FTELL *)
			nidxOffs := handle,
			cbWriteLen := 0,
			pWriteBuff := 0,
			cbReadLen := SIZEOF(tell_position),
			pReadBuff := ADR(tell_position),
			bExecute := TRUE
			);
	ELSIF X.bBusy = FALSE THEN
		para := FALSE;
		error := X.bError;
		error_code := SEL(error,0,UDINT_TO_BYTE(X.nErrId + 16#70));
		command := 0;

		(* ---------------- Debug-Message -----------------------*)
		(*IF _debug_enable THEN
			LOG_CL.NEW_MSG := 'FS: Tell: File ~1, pos ~3 ,error ~7, code ~8';
			LOG_CL.PRINTF[1] := used_filename;
			LOG_CL.PRINTF[3] := UDINT_TO_STRING(tell_position);
			LOG_CL.PRINTF[7] := INT_TO_STRING(BOOL_TO_INT(error));
			LOG_CL.PRINTF[8] := BYTE_TO_STRING(error_code);
			LOG_MSG();
		END_IF;*)
		(* -----------------------------------------------------------------*)
	END_IF;
END_IF;

(* ------------ File Remove ------------- *)
IF command = 7 THEN
	IF NOT para THEN
		para := TRUE;
		X(	nIdxGrp := 131, (* SYSTEMSERVICE_FDELETE *)
			nidxOffs := 16#0001_0000, (* PATH_GENERIC *)
			cbWriteLen := SIZEOF(FSD.FILENAME),
			pWriteBuff := ADR(FSD.FILENAME),
			cbReadLen := 0,
			pReadBuff := 0,
			bExecute := TRUE
			);
	ELSIF X.bBusy = FALSE THEN
		para := FALSE;
		error := X.bError;
		error_code := SEL(error,0,UDINT_TO_BYTE(X.nErrId + 16#80));
		command := 0;

		(* ---------------- Debug-Message -----------------------*)
		(*IF _debug_enable THEN
			LOG_CL.NEW_MSG := 'FS: Remove: File ~1, error ~7, code ~8';
			LOG_CL.PRINTF[1] := FSD.FILENAME;
			LOG_CL.PRINTF[7] := INT_TO_STRING(BOOL_TO_INT(error));
			LOG_CL.PRINTF[8] := BYTE_TO_STRING(error_code);
			LOG_MSG();
		END_IF;*)
		(* -----------------------------------------------------------------*)
	END_IF;
END_IF;

(* ---------------- Debug-Message -----------------------*)
(*IF _debug_enable THEN
	IF step_last <> step THEN
		LOG_CL.NEW_MSG := 'FS: Step: ~1';
		LOG_CL.PRINTF[1] := INT_TO_STRING(step);
		LOG_MSG();
	END_IF;
	step_last := step;
END_IF;*)
(* -----------------------------------------------------------------*)

(* revision history
ks	23. sep. 2010	rev 1.0
	original version
*)]]></ST>
    </Implementation>
    <LineIds Name="FILE_SERVER">
      <LineId Id="86" Count="506" />
    </LineIds>
  </POU>
</TcPlcObject>