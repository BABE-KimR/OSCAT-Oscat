<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.9">
  <POU Name="DLOG_STORE_RRD" Id="{d652f187-9a5c-428d-9c89-60d1909ca492}" SpecialFunc="None">
    <Declaration><![CDATA[FUNCTION_BLOCK DLOG_STORE_RRD
VAR_IN_OUT
	X : DLOG_DATA;
END_VAR
VAR_INPUT
	ENABLE : BOOL;
	TRIG_M : BOOL;
	TRIG_T : UDINT;
	URL : T_MaxString;
	DTI : DT;
	SEP : BYTE;
	DNS_IP4 : DWORD;
	TIMEOUT : TIME;
END_VAR
VAR_OUTPUT
	ERROR_C : DWORD;
	ERROR_T : BYTE;
END_VAR
VAR
	UCB : UNI_CIRCULAR_BUFFER;
	IP_C : IP_C; (* IP_Control Verwaltungsstruktur *)
	S_BUF : NETWORK_BUFFER;
	R_BUF : NETWORK_BUFFER;
	URL_DATA : url;
	DNS_CLIENT : DNS_CLIENT;
	HTTP_GET : HTTP_GET;
	IPC : IP_CONTROL;

	ra : BOOL;
	trig_m_last : BOOL;
	dti_last : DT := DT#2070-02-06-06:28:15;
	step: INT;
	sep_char : STRING(1);
	n : INT;
END_VAR

(*
version 1.2		26. july. 2011
programmer		ks
tested by			ks

DLOG_STORE_RRD der Baustein übergibt die DLOG Parameter an einen RoundRobinDatabase-Server
*)
]]></Declaration>
    <Implementation>
      <ST><![CDATA[X.DTI := DTI; (* Datum / Zeit eintragen *)
IF DTI <> dti_last THEN
	X.CLOCK_TRIG := TRUE;
	dti_last := DTI;
	X.STORE_TYPE := 1;
ELSE
	X.CLOCK_TRIG := FALSE;
END_IF;

X.ADD_DATA := FALSE;

IF ENABLE THEN
	IF X.CLOCK_TRIG THEN
		IF TRIG_T > 0 THEN (* automatischer Trigger *)
			ra := DT_TO_UDINT(DTI) MOD TRIG_T = 0;
		END_IF;
	ELSE
		ra := FALSE;
	END_IF;
	IF (TRIG_M AND NOT trig_m_last) OR ra OR X.ADD_DATA_REQ THEN (* manueller, automatischer oder externer Trigger *)
		X.ADD_DATA := TRUE; (* Daten loggen *)
	END_IF;
END_IF;
X.ADD_DATA_REQ := FALSE; (* externe Anforderung rücksetzen *)

CASE step OF

00:	IF ENABLE THEN
		URL_DATA:=STRING_TO_URL(STR:=URL,DEFAULT_PROTOCOL:='',DEFAULT_PATH:=''); (* URL zerlegen *)
		sep_char := CHR_TO_STRING(SEP);
		ERROR_T := 0;
		ERROR_C := 0;
		step := 20;
	END_IF;

20:	IF X.UCB.BUF_COUNT >= X.ID_MAX THEN (* Einträge vorhanden *)
		n := 1;
		WHILE n <= X.ID_MAX DO
			X.UCB.D_MODE := 12; (* Element lesen und löschen *)
			UCB(DATA:=X.UCB);
			IF n < X.ID_MAX THEN (* Trennzeichen hinzufügen *)
				X.UCB.D_STRING := CONCAT(X.UCB.D_STRING,sep_char);
			END_IF;
			IF LEN(X.UCB.D_STRING) + LEN(URL_DATA.QUERY) <= MAX_STRING_LENGTH THEN
				URL_DATA.QUERY := CONCAT(URL_DATA.QUERY,X.UCB.D_STRING); (* Query mit LOG-Daten ergänzen *)
				step :=40;
			ELSE
				ERROR_T := 4; (* LOG-Daten können nicht in URL gepackt werden *)
				ERROR_C := 1;
				step := 0;
			END_IF;
			n := n + 1;
		END_WHILE;;
	END_IF;

40:	IF DNS_CLIENT.DONE THEN
		step := 60;
	ELSIF (DNS_CLIENT.ERROR > 0) THEN
		ERROR_C := DNS_CLIENT.ERROR; (* Fehlerbehandlung *)
		ERROR_T := 1;
		step := 100;
	END_IF;

60:	IF HTTP_GET.DONE THEN
		n := HTTP_GET.BODY_START;
		IF R_BUF.BUFFER[n] <> 48 THEN (* ASCII '0' *)
			ERROR_C := 1;
			ERROR_T := 3;
		END_IF;
		step := 100;

	ELSIF HTTP_GET.ERROR > 0 THEN (* Fehlerbehandlung *)
		ERROR_C := HTTP_GET.ERROR;
		ERROR_T := 2;
		step := 100;
	END_IF;

100:	IF (NOT HTTP_GET.DONE) THEN (* UNLOCK HTTP DATA *)
		step := SEL(ERROR_T = 0, 120,0);
	END_IF;

120:	IF NOT ENABLE THEN
		X.UCB.D_MODE := 99;
		UCB(DATA:=X.UCB); (* Buffer löschen *)
		step := 0;
	END_IF;

END_CASE;

HTTP_GET(IP_C:=IP_C,S_BUF:=S_BUF,R_BUF:=R_BUF,IP4:=DNS_CLIENT.IP4,GET:=step=60,MODE:=2,UNLOCK_BUF:=step=100,URL_DATA:=URL_DATA); (* HTTP_GET *)
DNS_CLIENT(IP_C:=IP_C, S_BUF:=S_BUF, R_BUF:=R_BUF, DOMAIN:=URL_DATA.DOMAIN, IP4_DNS:= DNS_IP4, ACTIVATE:=step=40); (* DNS-Client *)
IPC(IP:= 0, PORT:= 0 , TIME_OUT:= TIMEOUT, IP_C:= IP_C, S_BUF:= S_BUF, R_BUF:= R_BUF); (* IP_CONTROL *)

trig_m_last := TRIG_M;

(* revision history
ks	01. jan. 2011	rev 1.0
	original version

ks	13. may. 2011	rev 1.1
	ADD_DATA_REQ hinzugefügt

ks	26. july. 2011	rev 1.2
	code optimierung D_MODE 12 und bessere fehlerauswertung
*)]]></ST>
    </Implementation>
    <LineIds Name="DLOG_STORE_RRD">
      <LineId Id="44" Count="104" />
    </LineIds>
  </POU>
</TcPlcObject>